use std::str::FromStr;
use crate::waveform_page::ast::*;

grammar;

pub Formula: Vec<Statement> ={
    <mut v:(<Stat> ";")*> <e:Stat?> => match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Num: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();

Float: f32 = <s:r"-?[0-9]*[.]([0-9]+)?"> => f32::from_str(s).unwrap();

ArrAcc: i64 = "[" <t:Num> "]" => t;

Var: String = <s:r"[a-zA-Z]([a-zA-Z0-9]+)?"> => s.to_string();

Targ: Targets ={
    <n:ArrAcc> => Targets::ArrAcc(n),
    <v:Var> => Targets::Var(v),
};

Opr: Opr ={
    "*" => Opr::Mul,
    "/" => Opr::Div,
    "+" => Opr::Add,
    "-" => Opr::Sub,
};

SaFunc: SaFunc ={
    "Sin"=>SaFunc::Sin,
    "Cos"=>SaFunc::Cos,
    "Saw"=>SaFunc::Saw,
    "Square"=>SaFunc::Sqr,
    "Sq"=>SaFunc::Sqr,
    "Tri"=>SaFunc::Tri,
    "Tahn"=>SaFunc::Tahn,
    "Tg"=>SaFunc::Tahn,
    "Abs"=>SaFunc::Abs,
    "Sign"=>SaFunc::Sign,
};

MaFunc: MaFunc ={
    "Min"=>MaFunc::Min,
    "Max"=>MaFunc::Max,
    "Avg"=>MaFunc::Avg,
    "Med"=>MaFunc::Med,
};

Comma<T>: Vec<T> = { // (0)
    <mut v:(<T> ",")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Range: Vec<Expr>={
    "[" <srt:Num> ".." <fsh:Num> "]"=> (srt..fsh).map(|x|Expr::ArrAcc(Box::new(Expr::Float(x as f32)))).collect(),
    "[" <srt:Num> "..=" <fsh:Num> "]"=> (srt..=fsh).map(|x|Expr::ArrAcc(Box::new(Expr::Float(x as f32)))).collect(),
    <f:SaFunc>"("<xs:Range>")"=>xs.into_iter().map(|x|Expr::SaFunc{f,x:Box::new(x)}).collect(),
}

Spec:Spec ={
    r"&[mM](ouse)?" => Spec::Mouse,
    r"&[pP]i"=>Spec::Pi,
    r"&[eE](uler)?"=>Spec::E,
    r"&[rR]a?nd"=>Spec::Rnd,
    r"&[tT](ime)?"=>Spec::Time,
    r"&[fF](ac)?"=>Spec::Fac,
}

Bin: Expr={
    #[precedence(level="1")]
    "(" <l:Expr> <o:Opr> <r:Expr>")" => Expr::Binary{l:Box::new(l),o,r:Box::new(r)},
    #[precedence(level="0")]
    "-"<r:Expr> => Expr::Binary{l:Box::new(Expr::Float(-1.)),o:Opr::Mul,r:Box::new(r)},
}

Expr: Expr ={
    "["<aa:Expr>"]" => Expr::ArrAcc(Box::new(aa)),
    <v:Var> => Expr::Var(v),
    <b:Bin> => b,
    <f:SaFunc>"("<x:Expr>")" => Expr::SaFunc{f,x:Box::new(x)},
    <f:MaFunc>"("<xs:Comma<Expr>>")"=>Expr::MaFunc{f,xs:Box::new(xs)},
    <f:MaFunc>"("<xs:Range>")"=>Expr::MaFunc{f,xs:Box::new(xs)},
    <f:Float>=>Expr::Float(f),
    <i:Num>=>Expr::Float(i as f32),
    <s:Spec>=>Expr::Spec(s),
};

Stat: Statement ={
     <i:Targ> "=" <e:Expr> => Statement{target:i,expr:e},
};

LogOpr: LogOpr ={
    "&&" => LogOpr::And,
    "||" => LogOpr::Or,
    "^" => LogOpr::Xor,
};

CmpOpr: CmpOpr ={
    "==" => CmpOpr::Eq,
    ">=" => CmpOpr::Greq,
    ">" => CmpOpr::Grt,
    "<=" => CmpOpr::Leq,
    "<" => CmpOpr::Lss,
};

BinExpr: BinExpr ={
    #[precedence(level="0")]
    "!" <l:BinExpr> => BinExpr::Bin{l:Box::new(l),o:LogOpr::Xor,r:Box::new(BinExpr::Lit(true))},
    #[precedence(level="1")]
    "(" <l:Expr> <o:CmpOpr> <r:Expr>")" => BinExpr::Cmp{l:Box::new(l),o,r:Box::new(r)},
    "(" <l:BinExpr> <o:LogOpr> <r:BinExpr>")" => BinExpr::Bin{l:Box::new(l),o,r:Box::new(r)},

};